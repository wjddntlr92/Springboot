package com.mysite.sbb.itemImg;

import java.io.File;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.mysite.sbb.item.SiteItem;
import com.mysite.sbb.question.QuestionRepository;

import lombok.RequiredArgsConstructor;


@RequiredArgsConstructor
@Service
public class ItemImgService {
	
	private final ItemImgRepository itemImgRepository;
	
	@Value("${file.download.director}")
	private String uploadRootDirectory;
	
	
	public boolean imgFileCheck(List<MultipartFile> imgs) {
		final String[] PERMISSION_FILE_EXT_ARR = {"GIF", "JPEG", "JPG", "PNG", "BMP", "PDF", "MP4"};
	
		boolean imgBoolean=false;
		for( MultipartFile img : imgs) {
			imgBoolean = false;
			String originFileName =  img.getOriginalFilename();
			String originFileExtension = originFileName.substring(originFileName.lastIndexOf(".")+1).toUpperCase();
			
			for(String ext :PERMISSION_FILE_EXT_ARR) {
				if(ext==originFileExtension) {
					imgBoolean =true;
					break;
					
				}
			}
			if(imgBoolean==false) {
				break;
			}
			
		}
		return imgBoolean;
	}
	
	
	public ResponseEntity<?> createImg(List<MultipartFile> imgs, SiteItem siteItem) throws  IOException {
		for( MultipartFile img : imgs) {
			int i = 1;
			ItemImg itemImg = new ItemImg();
			itemImg.setSiteItem(siteItem);
			itemImg.setItemImgOriginName(img.getOriginalFilename());
			itemImg.setCreateDate(LocalDateTime.now());
			
			String fileName = siteItem.getAuthor().getUsername()+"_"+siteItem.getId()+"_"+i;
			String path = uploadRootDirectory+fileName;		
			
			try {
				img.transferTo(new File(path));
			}catch (Exception e) {
				return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
			}
			
			itemImg.setItemImgUploadName(fileName);
			itemImg.setItemImgUploadPath(path);
			
			this.itemImgRepository.save(itemImg);
			
			
		}
		return ResponseEntity.ok("file upload ok~!");
	}

}
